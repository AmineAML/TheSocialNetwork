{"version":3,"sources":["./projects/site/src/app/layout/register/register.module.ts","./projects/site/src/app/layout/register/register.component.ts","./projects/site/src/app/layout/register/register.component.html","./projects/site/src/app/layout/register/register-routing.module.ts"],"names":[],"mappings":"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","file":"layout-register-register-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RegisterRoutingModule } from './register-routing.module';\nimport { RegisterComponent } from './register.component';\nimport { MaterialModule } from '../../shared/material.module';\n\n\n@NgModule({\n  declarations: [\n    RegisterRoutingModule.components\n  ],\n  imports: [\n    CommonModule,\n    RegisterRoutingModule,\n    MaterialModule\n  ]\n})\nexport class RegisterModule { }\n","import { Component, OnDestroy, OnInit } from '@angular/core';\nimport { FormControl, Validators, FormGroup, FormBuilder, AbstractControl, ValidationErrors } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { Subject } from 'rxjs';\nimport { map, takeUntil } from 'rxjs/operators';\nimport { AuthService } from '../../core/services/auth.service';\n\nclass CustormValidators {\n  static passwordContainsNumber(control: AbstractControl): ValidationErrors {\n    const regex = /\\d/\n\n    if (regex.test(control.value) && control.value !== null) {\n      return null\n    } else {\n      return {\n        passwordInvalid: true\n      }\n    }\n  }\n\n  static passwordMatch(control: AbstractControl): ValidationErrors {\n    const password = control.get('password').value\n    const confirm_password = control.get('confirm_password').value\n\n    if ((password !== null && confirm_password !== null) && (password == confirm_password)) {\n      return null\n    } else {\n      return {\n        passwordNotMatching: true\n      }\n    }\n  }\n}\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit, OnDestroy {\n  registerForm: FormGroup\n\n  //Handle unsubscriptions\n  private ngUnsubscribe = new Subject()\n\n  constructor(private formBuilder: FormBuilder,\n              private authService: AuthService,\n              private router: Router\n              /*private route: ActivatedRoute*/) { }\n  \n  ngOnInit(): void {\n    this.registerForm = this.formBuilder.group({\n      username: [null, [\n        Validators.required\n      ]],\n      email: [null, [\n        Validators.required,\n        Validators.email,\n        Validators.minLength(6)\n      ]],\n      password: [null, [\n        Validators.required,\n        Validators.minLength(3),\n        //Verify password contains a number, better verify it does contain a number and an uppercase character and symbols, also don't specify this and make it to register\n        //CustormValidators.passwordContainsNumber\n      ]],\n      confirm_password: [null, [\n        Validators.required\n      ]]\n    }, {\n      validators: CustormValidators.passwordMatch\n    })\n\n    // this.form = this.fb.group({\n    //   username: ['', Validators.required],\n    //   email: ['', Validators.email],\n    //   password: ['', Validators.required],\n    //   confirm_password: ['', Validators.required]\n    // });\n\n    /*if (await this.authService.checkAuthenticated()) {\n      await this.router.navigate([this.returnUrl]);\n    }\n    */\n  }\n\n  onSubmit() {\n    if (this.registerForm.invalid) {\n      return;\n    }\n\n    this.authService.register(this.registerForm.value).pipe(\n      map(user => this.router.navigate(['edit-profile'])),\n      takeUntil(this.ngUnsubscribe)\n    ).subscribe()\n  };\n  \n  // usernameFormControl = new FormControl('', [\n  //   //Validators.required,\n  //   Validators.required,\n  // ]);\n\n  // emailFormControl = new FormControl('', [\n  //   //Validators.required,\n  //   Validators.email,\n  // ]);\n\n  // confirmPasswordFormControl = new FormControl('', [\n  //   Validators.required,\n  // ]);\n  \n  // passwordFormControl = new FormControl('', [\n  //   Validators.required,\n  // ]);\n  \n  // registerForm = new FormGroup({\n  //   username: new FormControl(''),\n  //   email: this.emailFormControl,\n  //   password: new FormControl(''),\n  //   confirm_password: new FormControl('')\n  // });\n\n  // submitFormPressedNotifyErrors = false;\n\n  // isRequired = false;\n\n  //Check if the input are fieled, don't submit if any of the inputs aren't filled\n  // onSubmit() {\n  //   if (!this.registerForm.value.username ||!this.registerForm.value.email || !this.registerForm.value.password) {\n  //     //Display an error popup about submission\n  //     this.usernameFormControl;\n  //     this.emailFormControl;\n  //     this.passwordFormControl;\n  //     this.confirmPasswordFormControl;\n  //     this.submitFormPressedNotifyErrors = true;\n  //     this.isRequired = true\n  //   }\n  //   else {\n  //     const username = this.registerForm.value.username;\n  //     const email = this.registerForm.value.email;\n  //     const password = this.registerForm.value.password;\n  //     console.log(username)\n  //     console.log(email)\n  //     console.log(password)\n  //     // this.authService.signup(username, email, password).subscribe(data => console.log(data))\n  //   }\n  // };\n\n  // email = new FormControl('', [Validators.required, Validators.email]);\n\n  // hide = true;\n\n  // form: FormGroup;\n  // public loginInvalid: boolean;\n  // private formSubmitAttempt: boolean;\n  // private returnUrl: string;\n\n  // getErrorMessage() {\n  //   if (this.email.hasError('required')) {\n  //     return 'You must enter a value';\n  //   }\n\n  //   return this.email.hasError('email') ? 'Not a valid email' : '';\n  // }\n\n  // ngOnInit(): void {\n  //   this.form = this.fb.group({\n  //     username: ['', Validators.required],\n  //     email: ['', Validators.email],\n  //     password: ['', Validators.required],\n  //     confirm_password: ['', Validators.required]\n  //   });\n\n  //   /*if (await this.authService.checkAuthenticated()) {\n  //     await this.router.navigate([this.returnUrl]);\n  //   }\n  //   */\n  // }\n\n  ngOnDestroy() {\n    this.ngUnsubscribe.next()\n\n    this.ngUnsubscribe.complete()\n  }\n}\n","<div class=\"md:flex h-screen bg-gray-300 text-indigo-100\">\n\n    <div class=\"m-auto border-8 border-solid rounded shadow\">\n        <form class=\"flex flex-col gap-3 p-5 text-amethyst bg-bedrock\" [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"m-auto\">\n                <h3 class=\"py-3 px-6\">Register</h3>\n            </div>\n            <label>Username</label>\n            <input type=\"text\" class=\"w-full rounded py-3 px-4 outline-none focus:bg-indigo-200\" formControlName=\"username\">\n            <mat-hint *ngIf=\"registerForm.get('username').errors\">Username is required</mat-hint>\n            <label>Email</label>\n            <input type=\"email\" class=\"w-full rounded py-3 px-4 outline-none focus:bg-indigo-200\" formControlName=\"email\">\n            <mat-hint *ngIf=\"registerForm.get('email').errors\">Email is required</mat-hint>\n            <label>Password</label>\n            <input type=\"password\" class=\"w-full rounded py-3 px-4 outline-none focus:bg-indigo-200\" formControlName=\"password\">\n            <mat-hint *ngIf=\"registerForm.get('password').errors\">Password is required</mat-hint>\n            <!-- <mat-hint *ngIf=\"registerForm.get('password').hasError('passwordInvalid')\">Password is required</mat-hint> -->\n            <label>Confirm Password</label>\n            <input type=\"password\" class=\"w-full rounded py-3 px-4 outline-none focus:bg-indigo-200\" formControlName=\"confirm_password\">\n            <mat-hint *ngIf=\"registerForm.hasError('passwordNotMatching')\">Passwords not matching</mat-hint>\n            <p>By clicking \"Sign Up\", you aggree to <a href=\"#\">Privacy Policy</a>, <a href=\"#\">User Aggrement</a> and <a href=\"#\">Cookie Policy</a></p>\n            <div class=\"m-auto\">\n                <button type=\"submit\" class=\"bg-red-300 hover:bg-red-400 text-red-800 rounded py-3 px-6\" [disabled]=\"registerForm.invalid\">Sign Up</button>\n            </div>\n            <h2 class=\"text-lg md:text-2xl lg:text-3xl mb-6\">Already have an account? <a [routerLink]=\"['/login']\">Login</a></h2>\n        </form>\n    </div>\n\n</div>","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { RegisterComponent } from './register.component';\n\nconst routes: Routes = [\n  { path: '', component: RegisterComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegisterRoutingModule {\n  static components = [ RegisterComponent ];\n}\n"],"sourceRoot":"webpack:///"}