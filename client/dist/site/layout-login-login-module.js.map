{"version":3,"sources":["./projects/site/src/app/layout/login/login.module.ts","./projects/site/src/app/layout/login/login.component.ts","./projects/site/src/app/layout/login/login.component.html","./projects/site/src/app/layout/login/login-routing.module.ts"],"names":[],"mappings":"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","file":"layout-login-login-module.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { LoginRoutingModule } from './login-routing.module';\nimport { MaterialModule } from '../../shared/material.module';\n\n\n@NgModule({\n  declarations: [\n    LoginRoutingModule.components\n  ],\n  imports: [\n    CommonModule,\n    LoginRoutingModule,\n    MaterialModule\n  ]\n})\nexport class LoginModule { }\n","import { HttpParams } from '@angular/common/http';\nimport { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../core/services/auth.service';\nimport { map, takeUntil } from 'rxjs/operators'\nimport { Subject } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  loginForm: FormGroup\n\n  //Handle unsubscriptions\n  private ngUnsubscribe = new Subject()\n\n  constructor(private fb: FormBuilder,\n              private authService: AuthService,\n              private router: Router\n              /*private route: ActivatedRoute*/) { }\n\n  ngOnInit(): void {\n    this.loginForm = new FormGroup({\n      email: new FormControl(null, [\n        Validators.required,\n        Validators.email,\n        Validators.minLength(6)\n      ]),\n      password: new FormControl(null, [\n        Validators.required,\n        Validators.minLength(3)\n      ])\n    });\n\n    // this.form = this.fb.group({\n    //   email: ['', Validators.email],\n    //   password: ['', Validators.required]\n    // });\n\n    /*if (await this.authService.checkAuthenticated()) {\n      await this.router.navigate([this.returnUrl]);\n    }\n    */\n  }\n\n  onSubmit() {\n    if (this.loginForm.invalid) {\n      return\n    }\n\n    this.authService.login(this.loginForm.value).pipe(\n      map(token => this.router.navigate(['/'])),\n      takeUntil(this.ngUnsubscribe)\n    ).subscribe()\n  };\n\n  // emailFormControl = new FormControl('', [\n  //   //Validators.required,\n  //   Validators.email,\n  // ]);\n\n  // emailFormControl2 = new FormControl('', [\n  //   Validators.required,\n  //   //Validators.email,\n  // ]);\n\n  // passwordFormControl = new FormControl('', [\n  //   Validators.required,\n  // ]);\n\n  // loginForm = new FormGroup({\n  //   email: this.emailFormControl,\n  //   password: new FormControl('')\n  // });\n\n  // submitFormPressedNotifyErrors = false;\n\n  // isRequired = false;\n\n  //Check if the input are fieled, don't submit if any of the inputs aren't filled\n  // onSubmit() {\n  //   if (!this.loginForm.value.email || !this.loginForm.value.password) {\n  //     //Display an error popup about submission\n  //     this.emailFormControl2;\n  //     this.passwordFormControl;\n  //     this.submitFormPressedNotifyErrors = true;\n  //     this.isRequired = true\n  //   }\n  //   else {\n  //     const email = this.loginForm.value.email;\n  //     const password = this.loginForm.value.password;\n  //     console.log(email)\n  //     console.log(password)\n  //     this.authService.login(email, password).subscribe(data => console.log(data))\n  //   }\n  // };\n\n  // email = new FormControl('', [Validators.required, Validators.email]);\n\n  // hide = true;\n\n  // form: FormGroup;\n  // public loginInvalid: boolean;\n  // private formSubmitAttempt: boolean;\n  // private returnUrl: string;\n\n  // getErrorMessage() {\n  //   if (this.email.hasError('required')) {\n  //     return 'You must enter a value';\n  //   }\n\n  //   return this.email.hasError('email') ? 'Not a valid email' : '';\n  // }\n\n  ngOnDestroy() {\n    this.ngUnsubscribe.next()\n\n    this.ngUnsubscribe.complete()\n  }\n}","<div class=\"md:flex h-screen bg-gray-300 text-indigo-100\">\n\n    <div class=\"m-auto border-8 border-solid rounded shadow\">\n        <form class=\"flex flex-col gap-3 p-5 text-amethyst bg-bedrock\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"m-auto\">\n                <h3 class=\"py-3 px-6\">Login</h3>\n            </div>\n            <label>Email</label>\n            <input type=\"email\" class=\"w-full rounded py-3 px-4 outline-none focus:bg-indigo-200\" formControlName=\"email\">\n            <mat-hint *ngIf=\"loginForm.controls.email.errors\">Email is required</mat-hint>\n            <label>Password</label>\n            <input type=\"password\" class=\"w-full rounded py-3 px-4 outline-none focus:bg-indigo-200\" formControlName=\"password\">\n            <mat-hint *ngIf=\"loginForm.controls.password.errors\">Password is required</mat-hint>\n            <div class=\"m-auto\">\n                <button type=\"submit\" class=\"bg-red-300 hover:bg-red-400 text-red-800 rounded py-3 px-6\" [disabled]=\"!loginForm.valid\">Login</button>\n            </div>\n            <h2 class=\"text-lg md:text-2xl lg:text-3xl mb-6\">Don't have an account? <a [routerLink]=\"['/register']\">Sign Up</a></h2>\n        </form>\n    </div>\n\n</div>\n\n<!-- <div class=\"md:flex h-screen bg-gray-300 text-indigo-100\">\n\n    <div class=\"m-auto border-8 border-solid rounded shadow\">\n        <form class=\"flex flex-col gap-3 p-5 text-amethyst bg-bedrock\" [formGroup]=\"loginForm\" name=\"login\"\n            id='login-form' method=\"post\" (ngSubmit)=\"onSubmit()\">\n            <div class=\"m-auto\">\n                <h3 class=\"py-3 px-6\">Login</h3>\n            </div>\n            <label>Email</label>\n            <input type=\"email\" class=\"w-full rounded py-3 px-4 outline-none focus:bg-indigo-200\"\n                [formControl]=\"emailFormControl\" name=\"email\" formControlName=\"email\">\n            <label>Password</label>\n            <input type=\"password\" class=\"w-full rounded py-3 px-4 outline-none focus:bg-indigo-200\" id=\"password\"\n                name=\"password\" formControlName=\"password\">\n            <div class=\"m-auto\">\n                <button type=\"submit\" class=\"bg-red-300 hover:bg-red-400 text-red-800 rounded py-3 px-6\">Login</button>\n            </div>\n            <h2 class=\"text-lg md:text-2xl lg:text-3xl mb-6\">Don't have an account? <a href=\"#\">Sign Up</a></h2>\n        </form>\n    </div>\n\n</div> -->\n\n<!-- <div class=\"flex h-screen w-screen\">\n    <mat-card class=\"flex w-3/4 h-3/4\">\n        <mat-card-content>\n            <form [formGroup]=\"contactForm\" name=\"contact\" id='contact-form' method=\"post\" (ngSubmit)=\"onSubmit()\"\n                class=\"flex flex-col gap-3\">\n                <h3>Login</h3>\n                <mat-form-field class=\"example-full-width\">\n                    <mat-label>Email</mat-label>\n                    <input matInput [formControl]=\"emailFormControl\" type=\"email\" name=\"email\" formControlName=\"email\"\n                        [required]=\"isRequired ? 'required' : null\">\n                    <mat-error *ngIf=\"emailFormControl.hasError('email') && !emailFormControl2.hasError('required')\">\n                        Please enter a valid email address\n                    </mat-error>\n                    <mat-error\n                        *ngIf=\"!emailFormControl.hasError('email') && emailFormControl.hasError('required') && submitFormPressedNotifyErrors\">\n                        Please enter your email address\n                    </mat-error>\n                </mat-form-field>\n                <br>\n\n                <mat-form-field class=\"example-full-width\">\n                    <mat-label>Password</mat-label>\n                    <input matInput id=\"password\" name=\"password\" formControlName=\"password\"\n                        [required]=\"isRequired ? 'required' : null\">\n                    <mat-error *ngIf=\"passwordFormControl.hasError('required') && submitFormPressedNotifyErrors\">Please\n                        provide a valid password</mat-error>\n                </mat-form-field>\n\n                <mat-form-field class=\"full-width-input\">\n                    <input matInput [type]=\"hide ? 'password' : 'text'\" placeholder=\"Enter your password\">\n                    <button mat-icon-button matSuffix (click)=\"hide = !hide\" [attr.aria-label]=\"'Hide password'\"\n                        [attr.aria-pressed]=\"hide\">\n                        <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\n                    </button>\n                    <mat-error>\n                        Please provide a valid password\n                    </mat-error>\n                </mat-form-field>\n\n                <button mat-button type=\"submit\">Login</button>\n            </form>\n        </mat-card-content>\n    </mat-card>\n</div> -->","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { LoginComponent } from './login.component';\n\nconst routes: Routes = [\n  { path: '', component: LoginComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class LoginRoutingModule {\n  static components = [ LoginComponent ];\n}\n"],"sourceRoot":"webpack:///"}